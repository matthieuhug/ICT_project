<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Implementation - Project Report</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            line-height: 1.6;
        }

        h1, h2, h3 {
            color: #333;
        }

        p {
            margin-bottom: 1em;
        }

        code, pre {
            font-family: 'Courier New', monospace;
            background-color: #f4f4f4;
            padding: 10px;
            border-radius: 4px;
        }

        pre {
            white-space: pre-wrap;
            word-wrap: break-word;
        }

        .section {
            margin-bottom: 30px;
        }

        .list {
            margin-left: 20px;
        }

        .subsection {
            margin-top: 20px;
        }

        .item {
            margin-bottom: 0.5em;
        }
    </style>
</head>
<body>

    <div class="section">
        <h1>Implementation</h1>

        <div class="subsection">
            <h2>Overview</h2>
            <p>As previously discussed, two projects will be discussed in this project report. The project that has proven best is the Sonica-NB-IoT project. This project is an initiative of UCLA Wing Lab and stands for Software-defined Open NB-IoT Research Platform or SONICA. This project uses software defined radios in order to implement a fully functioning NB-IoT network. Its installation process is very simple and is done in a matter of minutes. It is a merge between srsRAN and its core network and eNB and OpenAirInterface.</p>

            <p>The second project that will be discussed is not as completed as the latter. This project stems from the OpenAirInterface initiative and is a secondary branch initiated by the Ntust group. OpenAirInterface is a very complex project allowing for 4G and 5G implementation. The fact that the NB-IoT branch called develop-nbiot-ntust stems from such a complex project makes it very unstable and hard to troubleshoot. This group had developed the NB-IoT branch solely for their proof of concept purposes and not as a generalized NB-IoT solution for the research ecosystem. The last commit on the git branch is from four years ago at the time of writing.</p>

            <p>Nonetheless it is interesting to discuss this initiative as it may evolve in coming years and it can still be interesting to test the project as it may be a secondary solution. It also allows us to have a standard in terms of stability by comparing both projects.</p>
        </div>

        <div class="subsection">
            <h2>Preparing the Host</h2>

            <div class="subsection">
                <h3>Hardware Limits</h3>
                <p>Using software defined radio equipment requires a powerful host since they are required to create, modulate, receive and demodulate the RF signals in real-time, which means that thousands of samples are being treated at once. The base hardware capacity of the host may be a direct end of a test bench attempt. In this project, two hosts have been used with completely identical installations. We will call them Host 1 with high-end components and Host 2 with less powerful components. Only Host 1 was able to create a working NB-IoT network. Host 2 was not able to create a connection with the UE even if the eNB and core network were running, the only interaction they had showed a wrong IMSI. The hypothesis behind this behavior is that Host 2 was not powerful enough either to send, code and modulate the signal or to receive, decode and demodulate it.</p>

                <p>The configuration of Host 1 and 2 can be seen in the documentation. The most critical difference lies in the type of USB connection rather than the overall power of the hosts. SDRs require a very fast USB connectivity in order to process the samples. Host 1 has a USB 3.0 port with a 20000M rating, whereas Host 2 has a USB 3.0 port but with a 10000M rating. The conclusion stems from the analysis of the processing load of the eNB and the core network. Even though Host 1 has double the amount of processing power with twice as many cores, both hosts were not in critical processing condition.</p>

                <p>The goal of this explanation is to highlight how important it is to correctly select the host with the proper hardware. Insufficient processing and transfer power means that the eNB will not work as intended.</p>
            </div>

            <div class="subsection">
                <h3>Preparing the Host (Continued)</h3>
                <p>Now that we have proper hardware, we can start installing the required software, drivers, and tinkering with the processor cores. This project has been built to work with Ubuntu 22.04 LTS, and if this is not the OS you are running, I would advise you to install it.</p>

                <p>The first step is to set the kernel to low-latency. The low-latency kernel allows for minimal latency between processes and hardware components, allowing for even faster processing speeds. The implementation can work without this, but if your hardware barely fits in the minimal requirements, this could be the working condition.</p>

                <p>To enhance system performance for time-sensitive tasks, you can install a low-latency kernel and set the CPU frequency scaling governor to <code>performance</code>. Follow these steps:</p>

                <div class="subsection">
                    <h4>Installing a Low-Latency Kernel</h4>
                    <p>First, check the availability of a low-latency kernel for your Linux distribution. For Ubuntu-based systems, the kernel can be installed using the following commands:</p>
                    <pre><code>sudo apt update
sudo apt install linux-lowlatency</code></pre>

                    <p>Once installed, reboot your system to boot into the low-latency kernel:</p>
                    <pre><code>sudo reboot</code></pre>

                    <p>You can verify that you are using the low-latency kernel after reboot by running:</p>
                    <pre><code>uname -r</code></pre>
                    <p>The output should include the term <code>lowlatency</code>.</p>
                </div>

                <div class="subsection">
                    <h4>Setting the CPU Governor to Performance</h4>
                    <p>To set the CPU governor to <code>performance</code> temporarily for all CPUs, execute:</p>
                    <pre><code>sudo cpupower frequency-set -g performance</code></pre>
                    <p>You can verify the current governor with:</p>
                    <pre><code>cpupower frequency-info</code></pre>
                    <p>However, this change will not persist after reboot.</p>

                    <h4>Making the Governor Setting Persistent</h4>
                    <p>To make the <code>performance</code> governor setting persistent, create a systemd service:</p>
                    <pre><code>sudo nano /etc/systemd/system/cpugovernor.service</code></pre>
                    <p>Add the following content to the file:</p>
                    <pre><code>[Unit]
Description=Set CPU governor to performance
After=multi-user.target

[Service]
Type=oneshot
ExecStart=/usr/bin/cpupower frequency-set -g performance

[Install]
WantedBy=multi-user.target</code></pre>
                    <p>Save and close the file. Then, enable the service:</p>
                    <pre><code>sudo systemctl enable cpugovernor.service</code></pre>

                    <p>Reboot your system to apply the changes. After reboot, confirm that the <code>performance</code> governor is active by running:</p>
                    <pre><code>cpupower frequency-info</code></pre>

                    <p>After this process and upon reboot, your host will be running the low-latency kernel and should have maximized processing efficiency.</p>
                </div>
            </div>
        </div>

        <div class="subsection">
            <h2>Installing UHD</h2>
            <p>This section outlines the installation and setup of various software components necessary for the USRP to work. Below, we detail the build guide for UHD software.</p>

            <div class="subsection">
                <h4>Build Dependencies</h4>
                <p>To build UHD, ensure the following are installed:</p>
                <pre><code>sudo apt-get install autoconf automake build-essential ccache cmake cpufrequtils doxygen ethtool \
g++ git inetutils-tools libboost-all-dev libncurses5 libncurses5-dev libusb-1.0-0 libusb-1.0-0-dev \
libusb-dev python3-dev python3-mako python3-numpy python3-requests python3-scipy python3-setuptools \
python3-ruamel.yaml</code></pre>
            </div>

            <div class="subsection">
                <h4>Linux Build Process</h4>
                <p>First, ensure your environment is set up correctly by cloning the UHD repository:</p>
                <pre><code>git clone --recursive git://github.com/ettusresearch/uhd.git</code></pre>

                <p>Next, build UHD by following these steps:</p>
                <pre><code>mkdir build
cd build
cmake ..
make
sudo make install</code></pre>

                <p>To test the installation, run:</p>
                <pre><code>uhd_find_devices</code></pre>
                <p>If successful, it will list the connected USRP devices and their details.</p>
            </div>
        </div>
    </div>

</body>
</html>
